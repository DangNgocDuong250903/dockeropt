name: Dockerfile Optimization Check

on:
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/Dockerfile.*'
  push:
    branches:
      - main
      - master
      - develop

jobs:
  dockerfile-optimization:
    runs-on: ubuntu-latest
    name: Analyze Dockerfiles
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dockeropt
        run: npm install -g dockeropt

      - name: Lint Dockerfiles
        id: lint
        run: |
          # Find all Dockerfiles
          DOCKERFILES=$(find . -type f -name 'Dockerfile*' ! -path '*/node_modules/*' ! -path '*/dist/*')
          
          EXIT_CODE=0
          for dockerfile in $DOCKERFILES; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üìù Analyzing: $dockerfile"
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            
            if ! dockeropt lint "$dockerfile" --format text; then
              EXIT_CODE=1
            fi
            echo ""
          done
          
          exit $EXIT_CODE
        continue-on-error: true

      - name: Generate SARIF report
        if: always()
        run: |
          DOCKERFILES=$(find . -type f -name 'Dockerfile*' ! -path '*/node_modules/*' ! -path '*/dist/*')
          
          mkdir -p sarif-results
          
          for dockerfile in $DOCKERFILES; do
            FILENAME=$(echo "$dockerfile" | sed 's/[^a-zA-Z0-9]/-/g')
            dockeropt ci "$dockerfile" \
              --format sarif \
              --out "sarif-results/${FILENAME}.sarif" \
              --fail-on high || true
          done

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif-results/
          category: dockerfile-optimization

      - name: Comment PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            // Find all Dockerfiles
            const dockerfiles = execSync(
              "find . -type f -name 'Dockerfile*' ! -path '*/node_modules/*' ! -path '*/dist/*'",
              { encoding: 'utf-8' }
            ).trim().split('\n').filter(Boolean);
            
            let comment = '## üê≥ Dockerfile Optimization Report\n\n';
            
            for (const dockerfile of dockerfiles) {
              try {
                const result = execSync(
                  `dockeropt fix "${dockerfile}" -o /tmp/dockeropt-out --format json`,
                  { encoding: 'utf-8' }
                );
                
                const data = JSON.parse(fs.readFileSync('/tmp/dockeropt-out/report.json', 'utf-8'));
                
                const grade = data.score >= 90 ? 'üü¢' : data.score >= 70 ? 'üü°' : 'üî¥';
                
                comment += `### ${grade} \`${dockerfile}\`\n\n`;
                comment += `**Score:** ${data.score}/100\n\n`;
                comment += `**Metrics:**\n`;
                comment += `- Size savings: ${data.metrics.estimatedSizeSavings} MB\n`;
                comment += `- Layer reduction: ${data.metrics.layerReduction}\n`;
                comment += `- Cache efficiency: ${data.metrics.cacheEfficiency}/100\n`;
                comment += `- Security score: ${data.metrics.securityScore}/100\n\n`;
                
                if (data.findings.length > 0) {
                  comment += `**Findings:** ${data.findings.length} issues\n`;
                  
                  const high = data.findings.filter(f => f.severity === 'high').length;
                  const medium = data.findings.filter(f => f.severity === 'medium').length;
                  const low = data.findings.filter(f => f.severity === 'low').length;
                  
                  if (high > 0) comment += `- üî¥ ${high} high\n`;
                  if (medium > 0) comment += `- üü° ${medium} medium\n`;
                  if (low > 0) comment += `- üîµ ${low} low\n`;
                }
                
                comment += '\n---\n\n';
              } catch (error) {
                comment += `### ‚ùå \`${dockerfile}\`\n\nError analyzing file\n\n---\n\n`;
              }
            }
            
            comment += '\n*Generated by [dockeropt](https://github.com/dockeropt/dockeropt)*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Fail on critical issues
        if: steps.lint.outcome == 'failure'
        run: |
          echo "‚ùå Critical Dockerfile issues found. Please fix them before merging."
          exit 1

